# Setting all days to 1
dates$mday = rep(1, length(dates))
# Months are stored as a value between 0 and 11
# We bring them back to a trimestrial value :
# [0,1,2,3,4,5,6,7,8,9,10,11] ==> [0,0,0,3,3,3,6,6,6,9,9,9]
dates$mon = unlist(lapply(dates$mon, function(m) floor(m/3 + 0.1) * 3))
topics_d = topics
topics_d$dates = unlist(lapply(dates, as.String))
library(dplyr)
amounts = topics_d %>%
group_by(dates) %>%
summarise(t1 = mean(V1),
t2 = mean(V2),
t3 = mean(V3),
t4 = mean(V4))
num_dates = as.POSIXlt(amounts$dates)
plot(num_dates, amounts$t1, col=1, ylim=c(0,1), type="l")
lines(num_dates, amounts$t2, col=2, ylim=c(0,1))
lines(num_dates, amounts$t3, col=3, ylim=c(0,1))
lines(num_dates, amounts$t4, col=4, ylim=c(0,1))
legend("topright",
col=(1:4),
lty=1,
cex=0.8,
legend=c("Topic 1",
"Topic 2",
"Topic 3",
"Topic 4"))
entities = read.csv("./data/full_entities.csv")
source("notebook.Rmd")
setwd("D:/Data Perso/Google Drive/Mon M2/Text Mining/projet/Documents-Corpus-Summarizing/src")
source("functions.r")
iterator = get_iterator(corpus$textx)
iterator = get_iterator(corpus$texts)
vocabulary = get_vocabulary(iterator)
dtm = get_dtm(vocabulary)
dtm.idf = get_dtm_tfidf(dtm)
search(
"soviet gorbatchev russia ussr",
corpus$texts,
vocab,
dtm.tfidf
)
make.request <- function(phrase) {
unlist(strsplit(tolower(phrase), " "))
}
vectorize <- function(words, vocab) {
v <- rep(0, nrow(vocab))
for (w in words) {
idx = which(vocab$term == w)
v[idx] = v[idx] + 1
}
v
}
cosinus <- function(u, v) {
if (all(u == 0) || all(v == 0)) return(0)
u <- u / sqrt(sum(u ^ 2))
v <- v / sqrt(sum(v ^ 2))
c(u %*% v)
}
closest <- function(doc, dtm, k) {
distance = apply(dtm, 1, function(x) cosinus(x, doc))
if (k == 0) k <- length(distance)
ord = order(distance, decreasing = T)
ord[1:k]
}
search <- function(phrase, corpus, vocab, dtm, k=10) {
r = vectorize(make.request(phrase), vocab)
ord <- closest(r, dtm, k)
corpus[ord]
}
search(
"soviet gorbatchev russia ussr",
corpus$texts,
vocab,
dtm.tfidf
)
search(
"soviet gorbatchev russia ussr",
corpus$texts,
vocabulary,
dtm.tfidf
)
dtm.tfidf = get_dtm_tfidf(dtm)
search(
"soviet gorbatchev russia ussr",
corpus$texts,
vocabulary,
dtm.tfidf
)
result = search(
"soviet gorbatchev russia ussr",
corpus$texts,
vocabulary,
dtm.tfidf,
k=20
)
corpus$titles[result,]
result
search <- function(phrase, corpus, vocab, dtm, k=10) {
r = vectorize(make.request(phrase), vocab)
ord <- closest(r, dtm, k)
ord
}
result = search(
"soviet gorbatchev russia ussr",
corpus$texts,
vocabulary,
dtm.tfidf,
k=20
)
result
corpus$titles[result,]
corpus$titles[result]
to_trimestrial_dates <- function(dates) {
# Setting all days to 1
dates$mday = rep(1, length(dates))
# Months are stored as a value between 0 and 11
# We bring them back to a trimestrial value :
# [0,1,2,3,4,5,6,7,8,9,10,11] ==> [0,0,0,3,3,3,6,6,6,9,9,9]
dates$mon = unlist(lapply(dates$mon, function(m) floor(m/3 + 0.1) * 3))
dates
}
group_by_dates <- function(dataframe, ...) {
amounts = dataframe %>%
group_by(dates) %>%
summarise(...)
amounts
}
group_by_dates(topics_d, t1 = mean(V1),
t2 = mean(V2),
t3 = mean(V3),
t4 = mean(V4))
group_by_dates(topics_d, t1 = mean(V1),
t2 = mean(V2),
t3 = mean(V3))
amounts = group_by_dates(topics_d,
t1 = mean(V1),
t2 = mean(V2),
t3 = mean(V3),
t4 = mean(V4))
num_dates = as.POSIXlt(amounts$dates)
plot(num_dates, amounts$t1, col=1, ylim=c(0,1), type="l")
lines(num_dates, amounts$t2, col=2, ylim=c(0,1))
lines(num_dates, amounts$t3, col=3, ylim=c(0,1))
lines(num_dates, amounts$t4, col=4, ylim=c(0,1))
legend("topright",
col=(1:4),
lty=1,
cex=0.8,
legend=c("Topic 1",
"Topic 2",
"Topic 3",
"Topic 4"))
as.Date(c("2019-01-01", "2019-01-02"))
as.Date(c("2019-01-01", "2019-01-03")) < as.Date("2019-01-02")
max(as.Date(c("2019-01-01", "2019-01-03")))
# Return indices of dates which are in the range : date_min <= d < date_max
filter_dates <- function(dates, date_min = NULL, date_max = NULL) {
dates = as.Date(dates)
if (is.null(date_min)) date_min = min(dates)
if (is.null(date_max)) date_max = max(dates)
which(date_min <= dates & dates < date_max)
}
corpus = read.csv("./data/nyt.csv", sep="\t", stringsAsFactors=F)
corpus = read.csv("../data/nyt.csv", sep="\t", stringsAsFactors=F)
# Return indices of dates which are in the range : date_min <= d < date_max
filter_dates <- function(dates, date_min = NULL, date_max = NULL) {
dates = as.Date(dates)
if (is.null(date_min)) date_min = min(dates) else date_min = as.Date(date_min)
if (is.null(date_max)) date_max = max(dates) else date_max = as.Date(date_max)
which(date_min <= dates & dates < date_max)
}
View(corpus)
filter_dates(corpus$dates, date_min = "1988-01-01")
filter_dates(corpus$dates, date_min = "1988-01-01", date_max = "1989-01-01")
corpus[filter_dates(corpus$dates, date_min = "1988-01-01", date_max = "1989-01-01"),]
a=corpus[filter_dates(corpus$dates, date_min = "1988-01-01", date_max = "1989-01-01"),]
View(a)
filter_entity <- function(entities, type, token, indices=NULL) {
if (!is.null(indices)) {
entities = entities[entities$doc_id == indices,]
}
entities[entities$entity == token & entities$entity_type == type,]
}
filter_entity(entities, "PERSON", "Cuomo", indices=1)
entities = read.csv("../data/full_entities.csv")
filter_entity(entities, "PERSON", "Cuomo", indices=1)
grepl("", "x")
filter_entity(entities, "PERSON", "Cuomo", indices=1)
1 in c(1,2,3)
filter_entity <- function(entities, types=NULL, tokens=NULL, indices=NULL) {
if (!is.null(indices)) {
entities = entities[entities$doc_id %in% indices,]
}
if (!is.null(types)) {
entities = entities[entities$entity_type %in% types,]
}
if (!is.null(tokens)) {
entities = entities[entities$entity %in% tokens,]
}
entities
}
filter_entity(entities, types="PERSON", tokens="Cuomo", indices=1)
filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=1)
filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=c(1,2,3))
filter_entity <- function(entities, types=NULL, tokens=NULL, indices=NULL) {
if (!is.null(indices)) {
entities = entities[entities$doc_id %in% indices,]
}
if (!is.null(types)) {
entities = entities[entities$entity_type %in% types,]
}
if (!is.null(tokens)) {
entities = entities[entities$entity %in% tokens,]
}
unique(entities$doc_id)
}
filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=c(1,2,3))
filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=1:1000)
a = entities[entities$doc_id %in% b,]
b=filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=1:1000)
a = entities[entities$doc_id %in% b,]
View(a)
filter_entity <- function(entities, types=NULL, tokens=NULL, indices=NULL, entities_only=F) {
if (!is.null(indices)) {
entities = entities[entities$doc_id %in% indices,]
}
if (!is.null(types)) {
entities = entities[entities$entity_type %in% types,]
}
if (!is.null(tokens)) {
entities = entities[entities$entity %in% tokens,]
}
if (entities_only) {
entities
}
else {
unique(entities$doc_id)
}
}
filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=c(1,2,3))
filter_entity(entities, types="PERSON", tokens=c("Cuomo", "Stan_Lundine"), indices=c(1,2,3), entities_only = T)
corpus = read.csv("../data/nyt.csv", sep="\t", stringsAsFactors=F)
is.sorted
corpus
sort(corpus$dates)
sort(corpus$dates) == corpus$dates
all(sort(corpus$dates) == corpus$dates)
grepl("(word)", "aa(word)aa", fixed=T)
grepl("(word)", c("aa(word)aa", "aaaa"), fixed=T)
grep("(word)", c("aa(word)aa", "aaaa"), fixed=T)
grep("(word)", c("aa(word)aa", "aaaa", "aa(word)aa"), fixed=T)
grep(c("(word)", "aaaa"), c("aa(word)aa", "aaaa", "aa(word)aa"), fixed=T)
source("functions.R")
topics = read.csv("../data/topics_probabilities.csv")
corpus = read.csv("../data/nyt.csv", sep="\t", stringsAsFactors=F)
relevant_docs = relevant_topic_documents(topics, corpus$titles, 30)
relevant_docs
dates = as.POSIXlt(corpus$dates)
dates = to_trimestrial_dates(dates)
topics_d = topics
topics_d$dates <- unlist(lapply(dates, format))
amounts = group_by_dates(topics_d,
t1 = mean(V1),
t2 = mean(V2),
t3 = mean(V3),
t4 = mean(V4))
num_dates = as.POSIXlt(amounts$dates)
plot(num_dates, amounts$t1, col=1, ylim=c(0,1), type="l")
lines(num_dates, amounts$t2, col=2, ylim=c(0,1))
lines(num_dates, amounts$t3, col=3, ylim=c(0,1))
lines(num_dates, amounts$t4, col=4, ylim=c(0,1))
legend("topright",
col=(1:4),
lty=1,
cex=0.8,
legend=c("Topic 1",
"Topic 2",
"Topic 3",
"Topic 4"))
relevant_docs[,3]
# filter_dates returns indices of dates that are between the specified range
filtered_dates = filter_dates(corpus$dates, date_min="1988-01-01", date_max="1990-01-01")
filtered_topics = topics[filtered_dates, 3]
dates = corpus$dates[filtered_dates]
dates = to_monthly_dates(as.POSIXlt(dates))
topics_d = data.frame("V3"=filtered_topics)
topics_d$dates <- unlist(lapply(dates, format))
amounts = group_by_dates(topics_d,
t3 = mean(V3))
num_dates = as.POSIXlt(amounts$dates)
plot(num_dates, amounts$t3, col=3, ylim=c(0,1), type="l")
legend("topright",
col=3,
lty=1,
cex=0.8,
legend="Topic 3")
# Reading extracted entities
entities = read.csv("../data/full_entities.csv")
# Only keeping the ones from the filtered dates
entities = entities[entities$doc_id %in% filtered_dates,]
# Generating matrices of apparition in documents for entities
entities_matrices = get_doc_matrices(entities)
persons = entities_matrices$PERSON
# Keeping persons that appear the most often
ord = order(rowSums(persons), decreasing = T)
small_pers = persons[ord[1:20],]
# Computing cooccurences of people with other people
cooc = small_pers %*% t(small_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F)
filtered_corpus = corpus[filtered_dates,]
iterator = get_iterator(filtered_corpus$texts)
vocabulary = get_vocabulary(iterator)
dtm = get_dtm(vocabulary)
ent_mat = load_entity_matrices()
View(ent_mat)
events = entities_matrices$EVENT
# Keeping persons that appear the most often
ord = order(rowSums(events), decreasing = T)
small_ev = events[ord[1:20],]
# Computing cooccurences of people with other people
cooc = small_pers %*% t(small_ev)
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F)
events = entities_matrices$EVENT
# Keeping persons that appear the most often
ord = order(rowSums(events), decreasing = T)
ev_pers = rbind(events[ord[1:10],], small_pers[1:10,])
# Computing cooccurences of people with other people
cooc = ev_pers %*% t(ev_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F)
ev_pers = rbind(events[ord[1:20],], small_pers)
# Computing cooccurences of people with other people
cooc = ev_pers %*% t(ev_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F)
ev_pers = rbind(events[ord[1:15],], small_pers[1:15,])
# Computing cooccurences of people with other people
cooc = ev_pers %*% t(ev_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F)
place = entities_matrices$PLACE
# Keeping persons that appear the most often
ord = order(rowSums(place), decreasing = T)
place_pers = rbind(place[ord[1:15],], small_pers[1:15,])
# Computing cooccurences of people with other people
cooc = place_pers %*% t(place_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(persons)[[1]][ord[1:15]]),
arrows=F)
entities = read.csv(entities_path)
# Only keeping the ones from the filtered dates
entities = entities[entities$doc_id %in% filtered_dates,]
# Generating matrices of apparition in documents for entities
entities_matrices = get_doc_matrices(entities)
persons = entities_matrices$PERSON
# Keeping persons that appear the most often
ord = order(rowSums(persons), decreasing = T)
small_pers = persons[ord[1:20],]
# Computing cooccurences of people with other people
cooc = small_pers %*% t(small_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F)
place = entities_matrices$PLACE
# Keeping persons that appear the most often
ord_ev = order(rowSums(place), decreasing = T)
place_pers = rbind(place[ord_ev[1:15],], small_pers[1:15,])
# Computing cooccurences of people with other people
cooc = place_pers %*% t(place_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F)
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F)
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep(1,15), rep(2,15)))
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep(3,15), rep(4,15)))
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep(3,15), rep(5,15)))
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep(3,15), rep(6,15)))
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep("lightblue",15), rep(6,15)))
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep("lightblue",15), rep("lightgreen",15)))
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F,
color="lightblue")
qgraph(cooc,
layout="spring",
vsize=6,
labels=dimnames(persons)[[1]][ord[1:20]],
arrows=F,
color=rep("lightblue", 20))
place = entities_matrices$EVENT
# Keeping persons that appear the most often
ord_ev = order(rowSums(place), decreasing = T)
place_pers = rbind(place[ord_ev[1:15],], small_pers[1:15,])
# Computing cooccurences of people with other people
cooc = place_pers %*% t(place_pers)
# Removing self cooccurences
for (i in 1:nrow(cooc)){
cooc[i,i] = 0
}
# Plot
library(qgraph)
qgraph(cooc,
layout="spring",
vsize=6,
labels=c(dimnames(persons)[[1]][ord[1:15]], dimnames(place)[[1]][ord_ev[1:15]]),
arrows=F,
color=c(rep("lightblue",15), rep("lightgreen",15)))
